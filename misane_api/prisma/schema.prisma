// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  title     String?
  boi       String?
  firstname String
  surname   String
  othername String?
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String?
  avatarId  String?
  createdAt DateTime @default(now())

  post         Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]

  following Follow[] @relation("FollowingUser")
  followers Follow[] @relation("FollowedUser")

  blocks    Block[] @relation("Blocker")
  blockedBy Block[] @relation("Blocked")

  resetToken ResetToken?
}

model Post {
  id        String     @id @default(uuid())
  title     String
  slug      String     @unique
  image     String?
  imageId   String?
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tags      String[]
  category  Category
  sections  Json
  likes     PostLike[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  likes CommentLike[]
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("FollowingUser", fields: [followerId], references: [id])
  following   User     @relation("FollowedUser", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
}

model Block {
  id        String   @id @default(uuid())
  blockerId String
  blockedId String
  blocker   User     @relation("Blocker", fields: [blockerId], references: [id])
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id])
  createdAt DateTime @default(now())
}

model ResetToken {
  id         String   @id @default(uuid())
  resetToken String   @unique
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  expDate    DateTime
}

enum Category {
  Technology
  Health
  Education
  Travel
  Food
  Business
  Lifestyle
  Entertainment
  Science
  Sports
}

